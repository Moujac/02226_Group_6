[General]
network = tsn.TSN_Network
sim-time-limit = 1.0s

# enable multiple canvas visualizers
*.visualizer.typename = "IntegratedMultiCanvasVisualizer"

# network route activity visualization
*.visualizer.numNetworkRouteVisualizers = 1
*.visualizer.networkRouteVisualizer[*].displayRoutes = true
*.visualizer.networkRouteVisualizer[0].packetFilter = "\"ats*\""
*.visualizer.networkRouteVisualizer[0].lineColor = "red1"

*.*.eth[*].bitrate = 1Gbps

# packet processing delay
*.*.bridging.directionReverser.delayer.typename = "PacketDelayer"
*.*.bridging.directionReverser.delayer.delay = 8us

*.ES_1.numApps = 1
*.ES_2.numApps = 2
*.ES_3.numApps = 3
*.ES_4.numApps = 3
*.ES_5.numApps = 1
*.ES_6.numApps = 1
*.ES_7.numApps = 2
*.ES_8.numApps = 3
*.ES_9.numApps = 1
*.ES_10.numApps = 1
*.ES_11.numApps = 4
*.ES_12.numApps = 2
*.ES_1.app[0].typename = "UdpSourceApp"
*.ES_1.app[0].display-name = "ats"
*.ES_1.app[0].io.destAddress = "ES_8"
*.ES_1.app[0].io.destPort = 1
*.ES_1.app[0].source.productionInterval = 500us
*.ES_1.app[0].source.initialProductionOffset = 500us
*.ES_1.app[0].source.packetLength = 1028B
*.ES_2.app[0].typename = "UdpSourceApp"
*.ES_2.app[0].display-name = "ats"
*.ES_2.app[0].io.destAddress = "ES_8"
*.ES_2.app[0].io.destPort = 2
*.ES_2.app[0].source.productionInterval = 500us
*.ES_2.app[0].source.initialProductionOffset = 500us
*.ES_2.app[0].source.packetLength = 1466B
*.ES_2.app[1].typename = "UdpSinkApp"
*.ES_2.app[1].io.localPort = 6
*.ES_3.app[0].typename = "UdpSourceApp"
*.ES_3.app[0].display-name = "ats"
*.ES_3.app[0].io.destAddress = "ES_12"
*.ES_3.app[0].io.destPort = 3
*.ES_3.app[0].source.productionInterval = 2000us
*.ES_3.app[0].source.initialProductionOffset = 2000us
*.ES_3.app[0].source.packetLength = 991B
*.ES_3.app[1..2].typename = "UdpSinkApp"
*.ES_3.app[1].io.localPort = 7
*.ES_3.app[2].io.localPort = 11
*.ES_4.app[0].typename = "UdpSourceApp"
*.ES_4.app[0].display-name = "ats"
*.ES_4.app[0].io.destAddress = "ES_11"
*.ES_4.app[0].io.destPort = 4
*.ES_4.app[0].source.productionInterval = 500us
*.ES_4.app[0].source.initialProductionOffset = 500us
*.ES_4.app[0].source.packetLength = 591B
*.ES_4.app[1..2].typename = "UdpSinkApp"
*.ES_4.app[1].io.localPort = 10
*.ES_4.app[2].io.localPort = 12
*.ES_5.app[0].typename = "UdpSourceApp"
*.ES_5.app[0].display-name = "ats"
*.ES_5.app[0].io.destAddress = "ES_11"
*.ES_5.app[0].io.destPort = 5
*.ES_5.app[0].source.productionInterval = 1000us
*.ES_5.app[0].source.initialProductionOffset = 1000us
*.ES_5.app[0].source.packetLength = 1010B
*.ES_6.app[0].typename = "UdpSourceApp"
*.ES_6.app[0].display-name = "ats"
*.ES_6.app[0].io.destAddress = "ES_2"
*.ES_6.app[0].io.destPort = 6
*.ES_6.app[0].source.productionInterval = 2000us
*.ES_6.app[0].source.initialProductionOffset = 2000us
*.ES_6.app[0].source.packetLength = 1324B
*.ES_7.app[0].typename = "UdpSourceApp"
*.ES_7.app[0].display-name = "ats"
*.ES_7.app[0].io.destAddress = "ES_3"
*.ES_7.app[0].io.destPort = 7
*.ES_7.app[0].source.productionInterval = 500us
*.ES_7.app[0].source.initialProductionOffset = 500us
*.ES_7.app[0].source.packetLength = 1102B
*.ES_7.app[1].typename = "UdpSinkApp"
*.ES_7.app[1].io.localPort = 8
*.ES_8.app[0].typename = "UdpSourceApp"
*.ES_8.app[0].display-name = "ats"
*.ES_8.app[0].io.destAddress = "ES_7"
*.ES_8.app[0].io.destPort = 8
*.ES_8.app[0].source.productionInterval = 500us
*.ES_8.app[0].source.initialProductionOffset = 500us
*.ES_8.app[0].source.packetLength = 1378B
*.ES_8.app[1..2].typename = "UdpSinkApp"
*.ES_8.app[1].io.localPort = 1
*.ES_8.app[2].io.localPort = 2
*.ES_9.app[0].typename = "UdpSourceApp"
*.ES_9.app[0].display-name = "ats"
*.ES_9.app[0].io.destAddress = "ES_11"
*.ES_9.app[0].io.destPort = 9
*.ES_9.app[0].source.productionInterval = 1000us
*.ES_9.app[0].source.initialProductionOffset = 1000us
*.ES_9.app[0].source.packetLength = 580B
*.ES_10.app[0].typename = "UdpSourceApp"
*.ES_10.app[0].display-name = "ats"
*.ES_10.app[0].io.destAddress = "ES_4"
*.ES_10.app[0].io.destPort = 10
*.ES_10.app[0].source.productionInterval = 500us
*.ES_10.app[0].source.initialProductionOffset = 500us
*.ES_10.app[0].source.packetLength = 854B
*.ES_11.app[0].typename = "UdpSourceApp"
*.ES_11.app[0].display-name = "ats"
*.ES_11.app[0].io.destAddress = "ES_3"
*.ES_11.app[0].io.destPort = 11
*.ES_11.app[0].source.productionInterval = 2000us
*.ES_11.app[0].source.initialProductionOffset = 2000us
*.ES_11.app[0].source.packetLength = 1325B
*.ES_11.app[1..3].typename = "UdpSinkApp"
*.ES_11.app[1].io.localPort = 4
*.ES_11.app[2].io.localPort = 5
*.ES_11.app[3].io.localPort = 9
*.ES_12.app[0].typename = "UdpSourceApp"
*.ES_12.app[0].display-name = "ats"
*.ES_12.app[0].io.destAddress = "ES_4"
*.ES_12.app[0].io.destPort = 12
*.ES_12.app[0].source.productionInterval = 2000us
*.ES_12.app[0].source.initialProductionOffset = 2000us
*.ES_12.app[0].source.packetLength = 863B
*.ES_12.app[1].typename = "UdpSinkApp"
*.ES_12.app[1].io.localPort = 3

*.ES*.hasUdp = firstAvailableOrEmpty("Udp") != ""

# steering stream identification and coding
*.ES*.bridging.streamIdentifier.identifier.mapping = 
 [{stream: "ats", packetFilter: expr(udp.destPort == 1 || udp.destPort == 2 || udp.destPort == 3 || udp.destPort == 4 || udp.destPort == 5 || udp.destPort == 6 || udp.destPort == 7 || udp.destPort == 8 || udp.destPort == 9 || udp.destPort == 10 || udp.destPort == 11 || udp.destPort == 12)}]

*.ES*.bridging.streamFilter.ingress.classifier.mapping = { "ats": 0 }
*.ES*.eth[*].macLayer.queue.numTrafficClasses = 1
*.ES*.eth[*].macLayer.queue.numQueues = 1
*.ES*.eth[*].macLayer.queue.*[0].display-name = "ats"

# client stream encoding
*.ES*.bridging.streamCoder.encoder.mapping = [{stream: "ats", pcp: 6}]

# enable streams
*.Switch*.hasIncomingStreams = true
*.Switch*.hasOutgoingStreams = true
*.ES*.hasIncomingStreams = true
*.ES*.hasOutgoingStreams = true

# stream coder mappings for switches
*.Switch*.bridging.streamCoder.encoder.mapping = [{stream: "ats", pcp: 6}]
*.Switch*.bridging.streamCoder.decoder.mapping = [{stream: "ats", pcp: 6}]
*.Switch*.eth[*].macLayer.queue.classifier.mapping = [[0], [0], [0], [0], [0], [0], [0], [0]]

# enable ingress per-stream filtering
*.Switch*.hasIngressTrafficFiltering = true

# enable egress traffic shaping
*.*.hasEgressTrafficShaping = true

# asynchronous shaper traffic metering
*.Switch*.bridging.streamFilter.ingress.numStreams = 1
*.Switch*.bridging.streamFilter.ingress.classifier.mapping = { "ats": 0 }
*.Switch*.bridging.streamFilter.ingress.*[0].display-name = "ats"
*.Switch*.bridging.streamFilter.ingress.meter[*].typename = "EligibilityTimeMeter"
*.Switch*.bridging.streamFilter.ingress.filter[*].typename = "EligibilityTimeFilter"

*.Switch*.bridging.streamFilter.ingress.meter[0].committedInformationRate = 10Mbps
*.Switch*.bridging.streamFilter.ingress.meter[0].committedBurstSize = 500B

# asynchronous traffic shaping
*.Switch*.eth[*].macLayer.queue.numTrafficClasses = 1
*.Switch*.eth[*].macLayer.queue.numQueues = 1
*.Switch*.eth[*].macLayer.queue.*[0].display-name = "ats"
*.Switch*.eth[*].macLayer.queue.queue[*].typename = "EligibilityTimeQueue"
*.Switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[*].typename = "Ieee8021qAsynchronousShaper"
